1. WHAT IS HEAD 
HEAD is reference to the last commit in the current checked out branch.
2. git diff
WorkingDirectory - StagingArea - CommitedArea - GITHUB
$ git diff : Diff the working copy with the index/Staging area
$ git diff --cached : Diff the index with HEAD
$ git diff HEAD : diff the working copy with head 

2. $How to push changes to the git repository
$ git push -u origin master
origin is the name of the remote repository
master is the branch

3. remove a remote from GIT.
git remote rm origin


4. HOW TO IGNORE YOUR CHANGES AND GET THE ORIGINAL FILE FROM GIT REPO.
//First go to the local dir where file is 
$ cd the_repo 
//replace the local file. 
$ git checkout HEAD name_of_file 
//Confirm if you have changes in that file or not -
$ git status 


5. Changing a remote's URL
$ git remote set-url origin https://github.com/Walluri/Web.git
[git remote add <name> <url>.]

If you're updating to use HTTPS, your URL might look like:
https://github.com/USERNAME/REPOSITORY.git
If you're updating to use SSH, your URL might look like:
git@github.com:USERNAME/REPOSITORY.git

6. What if you want to discard the local changes and get the code freshly from origin/branch_X.
$ git fetch --all 
//this command will download the latrest code from all remotes and all branches, with out trying to merge or re-base anything.
$ git fetch origin master // use this instead of the above command.
$ git reset --hard origin/master
//Git reset will reset the master branch to what you just fetched.
// the --hard option changes all the files in your working tree to match the files in origin/master.

7. Turn a folder with in a git repository into a brand new repository with out loosing git history.
Ex  
BEFORE : 
React/ReactWebsite/subProjects
React/Javascript/JavascriptProjects
AFTER :
React/ReactWebsite/subProjects
Javascript/JavascriptProjects [Javascript is a repo now]
---------------------
Steps to follow.
1. Create a new folder and Open Git Bash.
2. Clone the repository that contains the subfolder you want to split.
$ git clone https://github.com/Walluri/React.git
3. Change the current working directory to your cloned repository.
$ git cd React
4. Filter out the subfolder from the rest of the files
$ git filter-branch --prune-empty --subdirectory-filter ./Javascript master
// Now the repository contains only the contents of the "React/Javascript" folder, But not Javascript folder itself.
5.Create a new repo in github.
6. git remote set-url origin https://github.com/Walluri/Javascript.git
7. confirm new url : remote -v
8. git push -u origin BRANCH-NAME
9 : later you need to remove the folder from the original location.
---------------------

8. List GIT configuration details.
$ git config --list
This will list a few parameters and their values like 
user.email	http.sslbackend
user.name	http.sslcainfo
remote.origin difftool 
branch.master.remote
branch.master.merge
diff and merge tools

9. Remove a folder in GIT 
//- get latest
$ git checkout HEAD 
//- remove a folder recursively
git rm -r Javascript 
//commit and push
 
10. How to gitignore files -  3 ways
a) If your project has a .gitignore file then add your files/folders to that list.
b) If you want to remove something which is in your root directory such as files that are generated by your editor + if you dont want to create a .gitignore file to share with others.Then open and add the file or folder to .git/info/exclude file.
c) global git ignore is another way.

11. $ git log -2
//shows the last two commit entries.
$ git log --stat 
//lists the files changed also.
$git log --since=1.week
//can use untill also

12. change default editor
git config --global core.editor "'C:\Program Files (x86)\Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
confirm the same : $ git config --list 

 
13. Diff MERGE : 
go to website and update /users/username/.gitconfig file manually from their docs.
confirm that git config --list

$ git difftool
//this command gives the difference between [leftcolumn-rightcolumn] STAGED Directory - working directory

$ git difftool HEAD 
//this command gives the difference between [leftcolumn-rightcolumn] COMMIT/HEAD Directory - working directory

$git difftool --cached
//this command gives the difference between [leftcolumn-rightcolumn] COMMIT/HEAD Dir - STAGED Directory











 













